import bpy
import os
import json

upper_left = [-4.3202, 2.4302]
bottom_right = [4.3202, -2.4302]

height = bottom_right[1] - upper_left[1]
width = bottom_right[0] - upper_left[0]
 
input_width = 1920
input_height = 1080


body_parts =  [ "Nose", "Neck", "RShoulder", "RElbow", "RWrist", "LShoulder", "LElbow", "LWrist", "MidHip", "RHip", "RKnee", "RAnkle", "LHip", "LKnee", "LAnkle", "REye", "LEye", "REar", "LEar", "LBigToe", "LSmallToe", "LHeel", "RBigToe", "RSmallToe", "RHeel", "Background" ]


'''
TODO:
    
phase 1: visualization
    ✓ 1- initialize grease pencil objects for each keypoint
    ✓ 2- position each keypoint for each frame
    
phase 2: proof of concept
    1- replace keypoints with rig keypoints
    2- calculate slopes
    3- transfer slope data for rigging
    4- replace keypoints
    5- fix errors with constraints and detection confidence data 


phase 3: 
    1- conditional character poses
    2- multiple characters
    
    
phase 4: forced aligner for lip syncing 

'''

def process_json():
    
    processed_frames = []
    
    with os.scandir('./output_json_folder') as frames:
        for frame in frames:
            with open(frame, 'r') as f:
                
                data = json.loads(f.read())
                keypoints_raw = data["people"][0]["pose_keypoints_2d"]
                
                keypoints = []
                    
                # Get x and y values, 
                # ignore the detection confidence for now 
                for i in range(0,len(keypoints_raw),3):  
                    x = keypoints_raw[i]
                    y = keypoints_raw[i + 1]
                    keypoints.append({"x":x,"y":y})
                
                processed_frames.append(keypoints)
            
    return processed_frames

     

def locate_position(body_part_index, frame):
    
    input_x = frame[body_part_index]["x"]
    input_y = frame[body_part_index]["y"]

    output_x  = upper_left[0] + ( (input_x / input_width) * width )
    output_y  = upper_left[1] + ( (input_y / input_height) * height )

    return output_x, output_y



processed_frames = process_json()

for i in range(1, len(processed_frames)+1):
    
    for keypoint_index in range(0, 24):
        
        output_x, output_y = locate_position(keypoint_index, processed_frames[i-1])
    
        object_name = "circle" + str(keypoint_index)
        
        obj = bpy.data.objects[object_name]
        obj.location = (output_x, 0, output_y)
        obj.keyframe_insert(data_path="location", frame = i)










